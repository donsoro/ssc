// Generated by CoffeeScript 1.9.2
(function() {
  var DESTINATION_MATCH_FIELD, MATCH_CONFIDENCE, Process, SOURCE_MATCH_FIELD, _, fs, score,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  _ = require('underscore');

  score = require('string_score');

  MATCH_CONFIDENCE = 0.6;

  SOURCE_MATCH_FIELD = 'project_title';

  DESTINATION_MATCH_FIELD = 'project_description';

  Process = (function() {
    function Process() {
      this._matchTerm = bind(this._matchTerm, this);
      this._getScoresFor = bind(this._getScoresFor, this);
      var output;
      this.referenceCollection = this._prepareReferenceCollection();
      this.projectsToMatch = JSON.parse(fs.readFileSync(__dirname + "/469_export.json", 'utf8')).rows;
      output = this._processAll(this.projectsToMatch);
      this._write(output);
    }

    Process.prototype._prepareReferenceCollection = function() {
      var data, flatProjects;
      data = JSON.parse(fs.readFileSync(__dirname + "/scraped_all.json", 'utf8'));
      flatProjects = [];
      _.each(data, function(countryData) {
        var country;
        country = countryData.country;
        return _.each(countryData.themes, function(themeData) {
          var theme;
          theme = themeData.theme;
          return _.each(themeData.projects, function(projectData) {
            return flatProjects.push([country, theme, projectData.title, projectData.url, projectData.description]);
          });
        });
      });
      return flatProjects;
    };

    Process.prototype._processAll = function(projects) {
      debugger;
      return _.chain(projects).map((function(_this) {
        return function(project) {
          return _this._processProject(project);
        };
      })(this)).filter(function(project) {
        return project.top_match_project_id != null;
      }).value();
    };

    Process.prototype._processProject = function(project) {
      var matches, name, topMatch;
      name = project[SOURCE_MATCH_FIELD];
      matches = this._getScoresFor(name);
      topMatch = matches[0];
      return {
        searched_for: name,
        top_match_project_id: topMatch != null ? topMatch.project_id : void 0,
        top_match_project_title: topMatch != null ? topMatch.project_title : void 0,
        top_match_project_descr: topMatch != null ? topMatch.project_description : void 0,
        top_match_confidence: topMatch != null ? topMatch.score : void 0
      };
    };

    Process.prototype._write = function(output) {
      fs.writeFileSync(__dirname + "/matched_projects.json", JSON.stringify(output));
      return console.log("\nWritten " + output.length + " projects");
    };

    Process.prototype._getScoresFor = function(name) {
      debugger;
      return _.chain(this._matchTerm(name)).filter(function(match) {
        return match.score > MATCH_CONFIDENCE;
      }).sortBy(function(match) {
        return -match.score;
      }).value();
    };

    Process.prototype._matchTerm = function(term) {
      var result;
      process.stdout.write('.');
      result = _.map(this.referenceCollection, function(reference_project) {
        var title;
        title = reference_project[2];
        score = Math.ceil(title.score(term) * 100) / 100;
        return _.extend({
          score: score
        }, reference_project);
      });
      console.log(result);
      return result;
    };

    return Process;

  })();

  new Process;

}).call(this);
